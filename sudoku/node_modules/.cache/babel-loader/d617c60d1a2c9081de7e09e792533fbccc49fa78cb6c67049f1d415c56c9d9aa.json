{"ast":null,"code":"var _jsxFileName = \"/Users/jennychen/Desktop/project.nosync/boilerMake/sudoku/src/components/Result.js\";\nimport React, { Component, useState } from 'react';\nimport background from \"./sudoku.jpg\";\nimport particlesConfig from \"../config/particles-config\";\nimport ParticlesBackground from \"./ParticlesBackground\";\nimport { useCallback } from \"react\";\nimport Particles from \"react-particles\";\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Result extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      listItems: []\n    };\n    this.fetchData = async () => {\n      var inf = await fetch(\"http://localhost:3000/answer.txt\");\n      var final = await inf.text();\n      console.log(final);\n      var lines = final.split(\"\\n\");\n      ;\n      this.setState({\n        listItems: lines.map(number => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this))\n      });\n\n      // return final.split(\"\\n\");\n      // return <ul>{listItems}</ul>;\n    };\n  }\n\n  // constructor(props) {\n  //     super(props);\n\n  // fetch('../../sudoku_solve/answer.txt')\n  // .then((r) => r.text())\n  // .then(text  => {\n  // console.log(text);\n  // });\n\n  // var fs = require('fs');\n  // const readline = require('readline');\n  // var file_name = '../../sudoku_solve/answer.txt';\n\n  // var r = readline.createInterface({\n  //     input : fs.createReadStream(file_name)\n  // });\n\n  // var lst = []\n\n  // r.on('line', function(text) {\n  //     let s = \"\"\n  //     for(var i = 0; i < 9; ++i) {\n  //         s = s + text.charAt(i);\n  //         s = s + \" \";\n  //     }\n  //     console.log(s);\n  //     lst.push(s)\n  // } ) \n  // for(var i = 0; i < 10; ++i) {\n  //     console.log(lst[i]);\n  // }\n  // }\n\n  // function f(lst) {\n  //     const lineReader = require('line-reader');\n  //     lineReader.eachLine('Input.txt',(line,last)=>{\n  //     console.log(line);\n  //     lst.push(line);\n  //     console.log(\"push works\");\n  //     })\n  //     return lst;\n  // }\n\n  // var arr = new Array();\n  // var new_arr = f(arr);\n  // for (var elem of new_arr) {\n  //     console.log(elem);\n  // }\n\n  // var fs = require(\"fs\");\n  // var text = fs.readFileSync(\"./Input.txt\");\n  // var textByLine = text.split(\"\\n\")\n  // for (var elem of textByLine) {\n  //     console.log(elem);\n  // }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBackground, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        component: \"main\",\n        maxWidth: \"xs\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          children: this.state.listItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            href: \"/Upload\",\n            sx: {\n              mt: 50,\n              mb: 2\n            },\n            children: \"Go Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Result;","map":{"version":3,"names":["React","Component","useState","background","particlesConfig","ParticlesBackground","useCallback","Particles","Button","Box","Container","Result","state","listItems","fetchData","inf","fetch","final","text","console","log","lines","split","setState","map","number","render","mt","mb"],"sources":["/Users/jennychen/Desktop/project.nosync/boilerMake/sudoku/src/components/Result.js"],"sourcesContent":["import React, { Component, useState } from 'react';\nimport background from \"./sudoku.jpg\"\nimport particlesConfig from \"../config/particles-config\"\nimport ParticlesBackground from \"./ParticlesBackground\"\nimport { useCallback } from \"react\";\nimport Particles from \"react-particles\";\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport Container from '@mui/material/Container';\n\nclass Result extends Component {\n    // constructor(props, context) {\n    //     super(props, context);\n    //     this.fetchData = this.fetchData.bind(this);\n    // }\n\n    state = {\n        listItems: []\n    }\n\n    fetchData = async() => {\n        var inf = await fetch(\"http://localhost:3000/answer.txt\");\n        var final = await inf.text();\n        console.log(final);\n        var lines = final.split(\"\\n\");;\n        this.setState({\n            listItems: lines.map((number) =>\n                <p>{number}</p>\n            )\n        });\n\n        // return final.split(\"\\n\");\n        // return <ul>{listItems}</ul>;\n    }\n\n\n    // constructor(props) {\n    //     super(props);\n\n        \n        \n        // fetch('../../sudoku_solve/answer.txt')\n        // .then((r) => r.text())\n        // .then(text  => {\n        // console.log(text);\n        // });\n\n        // var fs = require('fs');\n        // const readline = require('readline');\n        // var file_name = '../../sudoku_solve/answer.txt';\n        \n        // var r = readline.createInterface({\n        //     input : fs.createReadStream(file_name)\n        // });\n\n        // var lst = []\n\n        // r.on('line', function(text) {\n        //     let s = \"\"\n        //     for(var i = 0; i < 9; ++i) {\n        //         s = s + text.charAt(i);\n        //         s = s + \" \";\n        //     }\n        //     console.log(s);\n        //     lst.push(s)\n        // } ) \n        // for(var i = 0; i < 10; ++i) {\n        //     console.log(lst[i]);\n        // }\n    // }\n\n\n\n\n    // function f(lst) {\n    //     const lineReader = require('line-reader');\n    //     lineReader.eachLine('Input.txt',(line,last)=>{\n    //     console.log(line);\n    //     lst.push(line);\n    //     console.log(\"push works\");\n    //     })\n    //     return lst;\n    // }\n\n    // var arr = new Array();\n    // var new_arr = f(arr);\n    // for (var elem of new_arr) {\n    //     console.log(elem);\n    // }\n\n\n\n    // var fs = require(\"fs\");\n    // var text = fs.readFileSync(\"./Input.txt\");\n    // var textByLine = text.split(\"\\n\")\n    // for (var elem of textByLine) {\n    //     console.log(elem);\n    // }\n\n    render() {\n        return (\n            <div className = \"home\">\n                <ParticlesBackground />\n                <Container component=\"main\" maxWidth=\"xs\">\n                    <Box>\n                        {this.state.listItems}\n                    </Box>\n                    <Box>\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        href=\"/Upload\"\n                        sx={{ mt: 50, mb: 2 }}\n                    >\n                        Go Back\n                    </Button>\n                    </Box>\n                </Container>\n            </div>\n            );\n    }\n}\n\nexport default Result"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,eAAe,MAAM,4BAA4B;AACxD,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,WAAW,QAAQ,OAAO;AACnC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,MAAMC,MAAM,SAASV,SAAS,CAAC;EAAA;IAAA;IAAA,KAM3BW,KAAK,GAAG;MACJC,SAAS,EAAE;IACf,CAAC;IAAA,KAEDC,SAAS,GAAG,YAAW;MACnB,IAAIC,GAAG,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;MACzD,IAAIC,KAAK,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;MAC5BC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;MAClB,IAAII,KAAK,GAAGJ,KAAK,CAACK,KAAK,CAAC,IAAI,CAAC;MAAC;MAC9B,IAAI,CAACC,QAAQ,CAAC;QACVV,SAAS,EAAEQ,KAAK,CAACG,GAAG,CAAEC,MAAM,iBACxB;UAAA,UAAIA;QAAM;UAAA;UAAA;UAAA;QAAA,QAAK;MAEvB,CAAC,CAAC;;MAEF;MACA;IACJ,CAAC;EAAA;;EAGD;EACA;;EAII;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;;EAKA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;;EAEAC,MAAM,GAAG;IACL,oBACI;MAAK,SAAS,EAAG,MAAM;MAAA,wBACnB,QAAC,mBAAmB;QAAA;QAAA;QAAA;MAAA,QAAG,eACvB,QAAC,SAAS;QAAC,SAAS,EAAC,MAAM;QAAC,QAAQ,EAAC,IAAI;QAAA,wBACrC,QAAC,GAAG;UAAA,UACC,IAAI,CAACd,KAAK,CAACC;QAAS;UAAA;UAAA;UAAA;QAAA,QACnB,eACN,QAAC,GAAG;UAAA,uBACJ,QAAC,MAAM;YACH,IAAI,EAAC,QAAQ;YACb,SAAS;YACT,OAAO,EAAC,WAAW;YACnB,IAAI,EAAC,SAAS;YACd,EAAE,EAAE;cAAEc,EAAE,EAAE,EAAE;cAAEC,EAAE,EAAE;YAAE,CAAE;YAAA,UACzB;UAED;YAAA;YAAA;YAAA;UAAA;QAAS;UAAA;UAAA;UAAA;QAAA,QACH;MAAA;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACV;EAEd;AACJ;AAEA,eAAejB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}