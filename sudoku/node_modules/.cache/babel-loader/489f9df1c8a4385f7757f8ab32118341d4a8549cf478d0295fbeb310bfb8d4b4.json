{"ast":null,"code":"var _jsxFileName = \"/Users/jennychen/Desktop/project.nosync/boilerMake/sudoku/src/components/Stream.js\",\n  _s = $RefreshSig$();\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Space, SpaceEvent, getUserMedia } from \"@mux/spaces-web\";\nimport Participant from \"./Participant\";\n\n// ðŸš¨ Donâ€™t forget to add your own JWT here!\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst JWT = \"PUT_YOUR_JWT_HERE\";\nfunction Stream() {\n  _s();\n  const spaceRef = useRef(null);\n  const [localParticipant, setLocalParticipant] = useState(null);\n  const joined = !!localParticipant;\n  useEffect(() => {\n    const space = new Space(\"PUT_YOUR_JWT_HERE\");\n\n    // Setup event listeners for other people joining and leaving\n    // space.on(SpaceEvent.ParticipantJoined, addParticipant);\n    // space.on(SpaceEvent.ParticipantLeft, removeParticipant);\n\n    spaceRef.current = space;\n    return () => {\n      // Cleanup event listeners when the component is unmounted\n      space.off(SpaceEvent.ParticipantJoined, addParticipant);\n      space.off(SpaceEvent.ParticipantLeft, removeParticipant);\n    };\n  }, [addParticipant, removeParticipant]);\n  const join = useCallback(async () => {\n    // Join the Space\n    let localParticipant = await spaceRef.current.join();\n\n    // Get and publish our local tracks\n    let localTracks = await getUserMedia({\n      audio: true,\n      video: true\n    });\n    await localParticipant.publishTracks(localTracks);\n\n    // Set the local participant so it will be rendered\n    setLocalParticipant(localParticipant);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: join,\n      disabled: joined,\n      children: \"Join Space\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), localParticipant && /*#__PURE__*/_jsxDEV(Participant, {\n      participant: localParticipant\n    }, localParticipant.connectionId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(Stream, \"rKntkvG15ZI3EkTFYcevwgtMBLM=\");\n_c = Stream;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"Stream\");","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","Space","SpaceEvent","getUserMedia","Participant","JWT","Stream","spaceRef","localParticipant","setLocalParticipant","joined","space","current","off","ParticipantJoined","addParticipant","ParticipantLeft","removeParticipant","join","localTracks","audio","video","publishTracks","connectionId","App"],"sources":["/Users/jennychen/Desktop/project.nosync/boilerMake/sudoku/src/components/Stream.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { Space, SpaceEvent, getUserMedia } from \"@mux/spaces-web\";\n\nimport Participant from \"./Participant\";\n\n// ðŸš¨ Donâ€™t forget to add your own JWT here!\nconst JWT = \"PUT_YOUR_JWT_HERE\";\n\nfunction Stream() {\n  const spaceRef = useRef(null);\n  const [localParticipant, setLocalParticipant] = useState(null);\n  const joined = !!localParticipant;\n\n  useEffect(() => {\n    const space = new Space(\"PUT_YOUR_JWT_HERE\");\n  \n    // Setup event listeners for other people joining and leaving\n    // space.on(SpaceEvent.ParticipantJoined, addParticipant);\n    // space.on(SpaceEvent.ParticipantLeft, removeParticipant);\n  \n    spaceRef.current = space;\n  \n    return () => {\n      // Cleanup event listeners when the component is unmounted\n      space.off(SpaceEvent.ParticipantJoined, addParticipant);\n      space.off(SpaceEvent.ParticipantLeft, removeParticipant);\n    };\n  }, [addParticipant, removeParticipant]);\n\n  const join = useCallback(async () => {\n    // Join the Space\n    let localParticipant = await spaceRef.current.join();\n\n    // Get and publish our local tracks\n    let localTracks = await getUserMedia({\n      audio: true,\n      video: true,\n    });\n    await localParticipant.publishTracks(localTracks);\n\n    // Set the local participant so it will be rendered\n    setLocalParticipant(localParticipant);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={join} disabled={joined}>\n        Join Space\n      </button>\n\n      {localParticipant && (\n        <Participant\n          key={localParticipant.connectionId}\n          participant={localParticipant}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAChE,SAASC,KAAK,EAAEC,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AAEjE,OAAOC,WAAW,MAAM,eAAe;;AAEvC;AAAA;AACA,MAAMC,GAAG,GAAG,mBAAmB;AAE/B,SAASC,MAAM,GAAG;EAAA;EAChB,MAAMC,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACS,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAMU,MAAM,GAAG,CAAC,CAACF,gBAAgB;EAEjCV,SAAS,CAAC,MAAM;IACd,MAAMa,KAAK,GAAG,IAAIV,KAAK,CAAC,mBAAmB,CAAC;;IAE5C;IACA;IACA;;IAEAM,QAAQ,CAACK,OAAO,GAAGD,KAAK;IAExB,OAAO,MAAM;MACX;MACAA,KAAK,CAACE,GAAG,CAACX,UAAU,CAACY,iBAAiB,EAAEC,cAAc,CAAC;MACvDJ,KAAK,CAACE,GAAG,CAACX,UAAU,CAACc,eAAe,EAAEC,iBAAiB,CAAC;IAC1D,CAAC;EACH,CAAC,EAAE,CAACF,cAAc,EAAEE,iBAAiB,CAAC,CAAC;EAEvC,MAAMC,IAAI,GAAGrB,WAAW,CAAC,YAAY;IACnC;IACA,IAAIW,gBAAgB,GAAG,MAAMD,QAAQ,CAACK,OAAO,CAACM,IAAI,EAAE;;IAEpD;IACA,IAAIC,WAAW,GAAG,MAAMhB,YAAY,CAAC;MACnCiB,KAAK,EAAE,IAAI;MACXC,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAMb,gBAAgB,CAACc,aAAa,CAACH,WAAW,CAAC;;IAEjD;IACAV,mBAAmB,CAACD,gBAAgB,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MAAQ,OAAO,EAAEU,IAAK;MAAC,QAAQ,EAAER,MAAO;MAAA,UAAC;IAEzC;MAAA;MAAA;MAAA;IAAA,QAAS,EAERF,gBAAgB,iBACf,QAAC,WAAW;MAEV,WAAW,EAAEA;IAAiB,GADzBA,gBAAgB,CAACe,YAAY;MAAA;MAAA;MAAA;IAAA,QAGrC;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEV;AAAC,GAlDQjB,MAAM;AAAA,KAANA,MAAM;AAoDf,eAAekB,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}