/// <reference types="node" />
import { EventEmitter } from 'events';
import { TrackKind, TrackSource } from './enums';
/**
 * A Track is used to interact with participant tracks.
 *
 * @noInheritDoc
 */
export declare class Track extends EventEmitter {
    /**
     * A unique id for this track.
     */
    tid: string;
    /**
     * The MediaStreamTrack that contains the media for this track
     */
    track?: MediaStreamTrack;
    /**
     * A name for this track
     */
    name: string;
    /**
     * The mute status of this track
     */
    muted: boolean;
    /**
     * The source of this track set when the track is created
     */
    source: TrackSource;
    /**
     * The height of the track if this is a video track
     */
    height: number;
    /**
     * The width of the track if this is a video track
     */
    width: number;
    /**
     * The kind of track. Can be [[TrackKind.Video]] or [[TrackKind.Audio]]
     */
    kind: TrackKind;
    /**
     * An array of all HTMLMediaElements that this track is currently attached to.
     */
    attachedElements: HTMLMediaElement[];
    /**
     * Get the mute status of this track
     * @returns True if the track is muted.
     */
    isMuted(): boolean;
    /**
     * Get the source of this track
     * @returns The source of this track.
     */
    getSource(): TrackSource;
    /**
     * Get the kind of this track
     * @returns What kind of track this is.
     */
    getKind(): TrackKind;
    /**
     * Checks whether this track has a MediaStreamTrack
     * @returns True if the Track has a MediaStreamTrack.
     */
    hasMedia(): boolean;
    /**
     * Attach this track to an existing HTMLMediaElement
     *
     * @param element A HTMLMediaElement to attach the track to.
     *
     * @returns The existing HTMLMediaElement with the track attached
     */
    attach(element: HTMLMediaElement): HTMLMediaElement;
    /**
     * Attach this track to a new HTMLMediaElement
     *
     * @returns A new HTMLMediaElement with the track attached.
     */
    attach(): HTMLMediaElement;
    /**
     * Detach this track from an existing HTMLMediaElement
     *
     * @param element A HTMLMediaElement to detach the track from.
     *
     * @returns The existing HTMLMediaElement with the track detached
     */
    detach(element: HTMLMediaElement): HTMLMediaElement[];
    /**
     * Detach this track from all attached elements
     *
     * @returns all elements with the track detached
     */
    detach(): HTMLMediaElement[];
    /**
     * detachFromElement is a helper function that detatches the track
     * from the provided element
     *
     * @param element A HTMLMediaElement to detach the track from.
     *
     * @returns The existing HTMLMediaElement with the track detached
     */
    private detachFromElement;
}
