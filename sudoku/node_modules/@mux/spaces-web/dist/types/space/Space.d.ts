/// <reference types="node" />
import { EventEmitter } from 'events';
import LocalParticipant from '../participant/LocalParticipant';
import { AcrScore } from '../space/enums';
import { SpaceOptionsParams } from './options';
import { Debugger } from '../debugger';
declare global {
    interface Window {
        MUX_SPACES_BACKEND_URL: string;
        spacesDebugger: Debugger;
        VERBOSE_LOGGING: boolean;
        MUX_SPACES_GOOD_VIDEO: boolean;
        MUX_SPACES_HELIOS_URL: string;
    }
}
/**
 * A Space is where participants meet. Participants can publish their
 * own tracks and subscribe to other publishers.
 *
 * A space emits [[SpaceEvent]] as a way to relay state updates.
 *
 * @noInheritDoc
 */
export declare class Space extends EventEmitter {
    /**
     * The local participant in the Space. This
     * will be set after a successful join.
     */
    localParticipant?: LocalParticipant;
    /**
     * A boolean indicating whether the Space is currently being broadcast.
     */
    broadcasting: boolean;
    protected jwt: string;
    private participants;
    private spaceId;
    private options?;
    sessionId?: string;
    private manager;
    private localRole;
    private participantId?;
    private activeSpeakers;
    private metadataCache?;
    private participantTracksToUnpublish;
    /**
     * Space is used to interact with a Space created first using
     * the Mux Spaces Server API. Once you have created a Space on the
     * server, you can get started by using this class.
     *
     * @param jwt - A JSON Web Token (JWT) with a `sub` of the Mux Space ID and an
     * `aud` value that is an array containing any of the following strings:
     * - `pub` - publishing of streams.
     * - `sub` - subscribing to streams.
     * @param options - An optional set of Space Options
     */
    constructor(jwt: string, options?: SpaceOptionsParams);
    /**
     * Leave the Space.
     */
    leave(): void;
    /**
     * Submit an [Absolute Category Rating (ACR)](https://en.wikipedia.org/wiki/Absolute_Category_Rating) score for this user's session.
     * This allows collection of user feedback regarding the general quality of experience of their Space's session
     */
    submitAcrScore(score: AcrScore): Promise<void>;
    /**
     * Join the Space.
     *
     * @returns A promise that resolves on a successful join.
     */
    join(): Promise<LocalParticipant>;
    private onTrack;
    private setJoinBroadcastState;
    private onTrackUnsubscribed;
}
