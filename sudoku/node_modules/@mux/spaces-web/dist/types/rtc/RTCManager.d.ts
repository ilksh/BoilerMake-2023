/// <reference types="node" />
import { EventEmitter } from 'events';
import { WSSignalClient } from '../api/SignalClient';
import { LocalTrack } from '../track/LocalTrack';
import { LocalParticipantLimits } from '../api/types';
import { SpaceOptionsParams } from '../space/options';
import { ParticipantRole } from '../participant/enums';
import RemoteParticipant from '../participant/RemoteParticipant';
import { SpaceOptions } from './types';
interface JoinResponse {
    sessionId: string;
    connectionId: string;
    participantId: string;
    localParticipantLimits: LocalParticipantLimits;
    broadcasting: boolean;
}
/**
 * RTCManager is in charge of managing all RTC related events
 * and state
 *
 * @noInheritDoc
 */
export declare class RTCManager extends EventEmitter {
    client: WSSignalClient;
    options: SpaceOptions;
    trackIdToConnId: Map<string, string>;
    private watcher;
    private pub?;
    private subSfus;
    private candidates;
    private sessionId?;
    private connectionId?;
    private participantId?;
    private spaceId;
    private iceServers;
    private role;
    private subscriptionPromises;
    private unsubscriptionPromises;
    constructor(spaceId: string, role: ParticipantRole, options?: SpaceOptionsParams);
    connectInternal(jwt: string, oldParticipants?: Map<string, RemoteParticipant>, reconnect_attempt?: number): Promise<{
        sessionId: string;
        connectionId: string;
        participantId: string;
        localParticipantLimits: LocalParticipantLimits;
        broadcasting: boolean;
    }>;
    reconnect(jwt: string, oldParticipants: Map<string, RemoteParticipant>, reconnect_attempt: number): Promise<{
        sessionId: string;
        connectionId: string;
        participantId: string;
        localParticipantLimits: LocalParticipantLimits;
        broadcasting: boolean;
    }>;
    connect(jwt: string): Promise<JoinResponse>;
    private setupSfu;
    private convertIceServers;
    private offerOrCreateSub;
    private onMediaTrackAdded;
    publishTracks(tracks: LocalTrack[]): void;
    unpublishAllTracks(): Promise<void>;
    updateTrack(track: LocalTrack, oldId: string): void;
    unpublishTracks(tracks: LocalTrack[]): void;
    unpublishTrack(track: LocalTrack): void;
    subscribeToParticipant(participant: RemoteParticipant): Promise<void[]>;
    unsubscribeFromParticipant(participant: RemoteParticipant): Promise<void[]>;
    subscribeToTrack(connectionId: string, trackId: string): Promise<void>;
    resolveUnsubPromise(trackId: string): boolean;
    close(): void;
}
export {};
