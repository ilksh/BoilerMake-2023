/// <reference types="node" />
import { EventEmitter } from 'events';
import { LocalTrack } from '../track/LocalTrack';
import { SimulcastParams } from '../api/types';
import { SpaceOptions } from './types';
export default class PubSFU extends EventEmitter {
    pc: RTCPeerConnection;
    id: string;
    private eventQueue;
    private negotiating;
    private audioEncodings;
    private cameraEncodings;
    private screenshareEncodings;
    private candidates;
    constructor(sfuId: string, simulcast: SimulcastParams, iceServers: RTCIceServer[], options: SpaceOptions);
    publishTracks(tracks: LocalTrack[]): void;
    unpublishAllTracks(): Promise<void>;
    updateTrack(track: LocalTrack, oldId: string): void;
    unpublishTracks(tracks: LocalTrack[]): void;
    private processQueue;
    private toRTPEncodings;
    private negotiate;
    private waitForNegotiation;
    addIceCandidate(candidate: RTCIceCandidateInit): Promise<void>;
    answerOffer(sdp: string): Promise<void>;
    close(): void;
}
