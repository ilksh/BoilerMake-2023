/// <reference types="node" />
import { RemoteTrack } from '../track/RemoteTrack';
import { EventEmitter } from 'events';
import { ParticipantRole, ParticipantStatus } from './enums';
/**
 * A RemoteParticipant is a remote peer connected to the space.
 * While Remote Participant events are emitted on [[Space]] remote
 * participants can also emit [[ParticipantEvent]] to give you more fine grained control.
 *
 * @noInheritDoc
 */
export default class RemoteParticipant extends EventEmitter {
    /**
     * The unique participant id derived from the `participant_id`
     * field in the JWT
     */
    id: string;
    /**
     * A unique connection id generated every time a participant connects
     * to a space
     */
    connectionId: string;
    private manager;
    /**
     * A map of all audio tracks on this participant
     */
    audioTracks: Map<string, RemoteTrack>;
    /**
     * A map of all video tracks on this participant
     */
    videoTracks: Map<string, RemoteTrack>;
    /**
     * The role for this participant in the space. This can be one of
     * [[ParticipantRole.Publisher]] or [[ParticipantRole.Subscriber]]
     */
    role: ParticipantRole;
    /**
     * The status of this participant
     */
    status: ParticipantStatus;
    /**
     * getVideoTracks returns all video tracks
     * for a participant
     *
     * @returns a list of all {@link RemoteTrack} with kind video
     */
    getVideoTracks(): RemoteTrack[];
    /**
     * getAudioTracks returns all audio tracks
     * for a participant
     *
     * @returns a list of all {@link RemoteTrack} with kind audio
     */
    getAudioTracks(): RemoteTrack[];
    /**
     * getTracks returns all (video and audio) tracks
     * for a participant
     *
     * @returns
     */
    getTracks(): RemoteTrack[];
    /**
     * Checks whether the participant is subscribed.
     * @returns `true` if the RemoteParticipant is subscribed
     */
    isSubscribed(): boolean;
    /**
     * subscribes the [[LocalParticipant]] to this RemoteParticipant's media.
     *
     * After this promise resolves you can expect to receive one [[SpaceEvent.ParticipantTrackSubscribed]] event to fire for each [[RemoteTrack]]
     * that this participant has published to the space. Subsequent tracks that this participant publishes
     * will be automatically subscribed to until unsubscribed is called.
     *
     * **NOTE:** This function may only be called when [[SpaceOptions.subscriptionMode]] is set to [[SubscriptionMode.Manual]].
     */
    subscribe(): Promise<void>;
    /**
     * unsubscribes the [[LocalParticipant]] from this RemoteParticipant's media.
     *
     * After this promise resolves you can expect to receive one [[SpaceEvent.ParticipantTrackUnsubscribed]] event to fire for each [[RemoteTrack]]
     * that this participant has published to the space.
     *
     * **NOTE:** This function may only be called when [[SpaceOptions.subscriptionMode]] is set to [[SubscriptionMode.Manual]].
     */
    unsubscribe(): Promise<void>;
}
