import { LocalTrack } from '../track/LocalTrack';
import { BroadcastState } from '../space/enums';
import { WSJoinResponse, SfuDescription, CustomEventMessage } from './types';
import { PromiseWrapper } from '../interfaces';
import RemoteParticipant from '../participant/RemoteParticipant';
import { SubscriptionMode } from '../space/options';
export declare class WSSignalClient {
    onOffer?: (sd: SfuDescription) => void;
    onTrackAdded?: (track: any) => void;
    onTrackRemoved?: (track: any) => void;
    onCandidate?: (candidate: any, type: any, id: string) => void;
    onParticipantJoined?: (participant: any) => void;
    onParticipantLeft?: (connectionId: string) => void;
    onAnswer?: (sdp: any) => void;
    onTrackMute?: (connectionId: string, trackId: string) => void;
    onTrackUnmute?: (connectionId: string, trackId: string) => void;
    onActiveSpeakers?: (tracks: {
        connectionId: string;
        trackId: string;
    }[]) => void;
    onCustomEvent?: (eventMessage: CustomEventMessage) => void;
    onBroadcastStateUpdate?: (state: BroadcastState) => void;
    onClose?: (ev: CloseEvent) => Promise<void>;
    triggerReconnect?: () => Promise<void>;
    joinPromise: PromiseWrapper;
    subscribePromises: Map<string, PromiseWrapper>;
    unsubscribePromises: Map<string, PromiseWrapper>;
    requestPromises: Map<string, PromiseWrapper>;
    private joined;
    ws?: WebSocket;
    connect(jwt: string, autoSub: number, reconnectId?: string, reconnect_attempt?: number): Promise<WSJoinResponse>;
    syncParticipantState(oldParticipants: Map<string, RemoteParticipant>, newParticipants: any[], subscriptionMode: SubscriptionMode, trackIdToConnId: Map<string, string>): void;
    close(): void;
    sendAnswer(sdp: any, id: string): void;
    sendOffer(sdp: any): void;
    sendCandidate(candidate: RTCIceCandidateInit, type: number, id: string): void;
    sendSubscribeRequest(connectionId: string, trackIds: string[]): Promise<void>;
    sendUnsubscribeRequest(connectionId: string, trackIds: string[]): Promise<void>;
    sendPendingTrack(track: LocalTrack, mid: string): void;
    sendMuteRequest(trackId: string): void;
    sendUnmuteRequest(trackId: string): void;
    sendCustomEvent(payload: string): Promise<CustomEventMessage>;
    sendRequest(req: any): void;
    private sigCandidateToRTCCandidate;
    private rtcCandidateToSigCandidate;
    private handleSignalMessage;
}
